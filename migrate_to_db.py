#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import json
import sqlite3
import os
from datetime import datetime

def migrate_to_sqlite():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ votes.json –∏ user_votes.json –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ SQLite...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    votes_file = "backend/votes.json"
    user_votes_file = "backend/user_votes.json"
    
    if not os.path.exists(votes_file):
        print("‚ùå –§–∞–π–ª votes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not os.path.exists(user_votes_file):
        print("‚ùå –§–∞–π–ª user_votes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "backend/votes.db"
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS city_votes (
                city_id TEXT PRIMARY KEY,
                likes INTEGER DEFAULT 0,
                dislikes INTEGER DEFAULT 0,
                dont_know INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_votes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                city_id TEXT NOT NULL,
                vote_type TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, city_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_votes_user_id ON user_votes(user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_votes_city_id ON user_votes(city_id)')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
        print("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...")
        
        with open(votes_file, 'r', encoding='utf-8') as f:
            votes_data = json.load(f)
        
        with open(user_votes_file, 'r', encoding='utf-8') as f:
            user_votes_data = json.load(f)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤ —Å –≥–æ–ª–æ—Å–∞–º–∏: {len(votes_data)}")
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–æ–ª–æ—Å–∞–º–∏: {len(user_votes_data)}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –≥–æ—Ä–æ–¥–æ–≤
        print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –≥–æ—Ä–æ–¥–æ–≤...")
        cities_migrated = 0
        
        for city_id, votes in votes_data.items():
            cursor.execute('''
                INSERT OR REPLACE INTO city_votes (city_id, likes, dislikes, dont_know)
                VALUES (?, ?, ?, ?)
            ''', (city_id, votes.get('likes', 0), votes.get('dislikes', 0), votes.get('dont_know', 0)))
            cities_migrated += 1
        
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {cities_migrated}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        user_votes_migrated = 0
        
        # –í user_votes.json —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ ID –≥–æ—Ä–æ–¥–æ–≤, —Ç–∏–ø –≥–æ–ª–æ—Å–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ votes.json
        for user_id, voted_cities in user_votes_data.items():
            for city_id in voted_cities:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤ votes.json
                if city_id in votes_data:
                    city_votes = votes_data[city_id]
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –ü–æ–∫–∞ —á—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ 'like' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    vote_type = 'like'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    cursor.execute('''
                        INSERT OR REPLACE INTO user_votes (user_id, city_id, vote_type)
                        VALUES (?, ?, ?)
                    ''', (user_id, city_id, vote_type))
                    user_votes_migrated += 1
        
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_votes_migrated}")
        print("‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–∏–ø –≥–æ–ª–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ 'like' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute('SELECT COUNT(*) FROM city_votes')
        cities_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM user_votes')
        user_votes_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_votes')
        users_count = cursor.fetchone()[0]
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   üèôÔ∏è  –ì–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {cities_count}")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {users_count}")
        print(f"   üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_votes_count}")
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å server_with_db.js")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

def backup_json_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π JSON —Ñ–∞–π–ª–æ–≤...")
    
    backup_dir = "json_backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    files_to_backup = [
        ("backend/votes.json", f"{backup_dir}/votes_{timestamp}.json"),
        ("backend/user_votes.json", f"{backup_dir}/user_votes_{timestamp}.json")
    ]
    
    for source, destination in files_to_backup:
        if os.path.exists(source):
            import shutil
            shutil.copy2(source, destination)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {source} -> {destination}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "backup":
        backup_json_files()
    else:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        backup_json_files()
        print()
        # –ó–∞—Ç–µ–º –º–∏–≥—Ä–∏—Ä—É–µ–º
        migrate_to_sqlite() 